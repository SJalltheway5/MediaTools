#!/bin/bash -e
# batch generate video proxy files
# Last updated: 2020-04-25 00:18
# TODO: autodetect framerate

# Adjustable variables
TYPES='MOV MP4 MTS'
TYPES="${TYPES} ${TYPES,,}"
TC_FONT='DejaVuSansMono'
TC_FONT_SIZE='18'
TC_FONT_COLOR='white'

# Check for dependencies
for DEP in ff{mpeg,probe}; do
  if test -z "$(which ${DEP})"; then
    echo 'ERROR: requires installation of '${DEP}
    EXIT=1
    fi
done
test "${EXIT}" = "1" && exit 1

# Usage
function usage { cat << DONE; }
Usage:
  ${0}  <options>  /path/to/originals  /path/to/proxies

Options:
  h|help|-h|-help|--help
  tcpos|-tcpos|--timecode-position  <l|left|c|center|r|right>
  tcrate|-tcrate|--timecode-rate  <framerate>
  res|-res|--resolution  <width>x<height>
  f|-f|--format <h264|prores>
  df|-df|--dropframe
  ndf|-ndf|--nondropframe

Example:
  ${0} -tcpos left -tcrate 29.97 -res 854x480 footage/original footage/proxy

"${0}" with no arguments runs in interactive mode

Default values are
  --timecode-position left
  --timecode-rate 29.97
  --resolution 854x480
  --format h264
  --dropframe

DONE

case ${1} in
  h|help|-h|-help|--help) usage; exit 0;;
esac

while test ${#} -gt 2; do
  case ${1} in
    tcpos|-tcpos|--timecode-position)
      TC_POS=${2}
      shift; shift;;
    tcrate|-tcrate|--timecode-rate)
      TC_RATE=${2}
      shift; shift;;
    res|-res|--resolution)
      PROX_W=$(echo ${2} | cut -dx -f1)
      PROX_H=$(echo ${2} | cut -dx -f2)
      shift; shift;;
    f|-f|--format)
      case "${2}" in
        h264) PROX_FORMAT='-c:v libx264 -crf 23';;
        prores) PROX_FORMAT='-c:v prores -profile:v 0';;
        *) echo 'ERROR: unsupported format "'${2}'"'; exit 1;;
      esac
      shift; shift;;
    df|-df|--drop-frame)
      TC_TYPE=';'
      shift;;
    ndf|-ndf|--non-drop-frame)
      TC_TYPE=':'
      shift;;
  esac
done

# Set default values, if needed
test -z "${TC_POS}" && TC_POS=l
test -z "${TC_RATE}" && TC_RATE='29.97'
test -z "${PROX_W}" && PROX_W=854
test -z "${PROX_H}" && PROX_H=480
test -z "${PROX_FORMAT}" && PROX_FORMAT='-c:v libx264 -crf 23'
test -z "${TC_TYPE}" && TC_TYPE=';'
TC_START='00\:00\:00\'${TC_TYPE}'00'

# Get path to original files
ORIG_DIR="${1}"
while test -z "${ORIG_DIR}"; do
  echo -n 'Path to originals: '
  read -e ORIG_DIR
  # Allow ~ and ''
  ORIG_DIR="${ORIG_DIR//"~"/"${HOME}"}"
  if test "$(echo "${ORIG_DIR}" | cut -c 1)" = "'" &&\
    test "$(echo "${ORIG_DIR}" | rev | cut -c 1)" = "'"; then
    ORIG_DIR="$(echo "${ORIG_DIR}" | cut -c 2- | rev | cut -c 2- | rev)"
  fi
  if test -z "${ORIG_DIR}"; then
    echo
  elif test ! -d "${ORIG_DIR}"; then
    echo 'ERROR: "'${ORIG_DIR}'" is not a directory'
    unset ORIG_DIR
  fi
done
ORIG_DIR="$(cd "${ORIG_DIR}" && pwd)"

# Get path to proxy files
PROX_DIR="${2}"
while test -z "${PROX_DIR}"; do
  echo -n 'Path to proxies: '
  read -e PROX_DIR
  # Allow ~ and ''
  PROX_DIR="${PROX_DIR//"~"/"${HOME}"}"
  if test "$(echo "${PROX_DIR}" | cut -c 1)" = "'" &&\
    test "$(echo "${PROX_DIR}" | rev | cut -c 1)" = "'"; then
    PROX_DIR="$(echo "${PROX_DIR}" | cut -c 2- | rev | cut -c 2- | rev)"
  fi
  test -z "${PROX_DIR}" && echo
done
test -d "${PROX_DIR}" || mkdir -p "${PROX_DIR}"
PROX_DIR="$(cd "${PROX_DIR}" && pwd)"

echo 'Generating proxies from "'${ORIG_DIR}'" to "'${PROX_DIR}'" ...
'

# Recreate directory structure
pushd "${ORIG_DIR}" >/dev/null
find . -type d -exec mkdir -p "${PROX_DIR}"/{} \;
FILES=
for TYPE in ${TYPES}; do
  FILES="${FILES} $(find . -name "*.${TYPE}")"
done
FILES=$(echo ${FILES} | sed s@\ ./@\\n@g)
popd >/dev/null

function mk_proxy {
  # Variables for ffmpeg
  local INPUT="${ORIG_DIR}/${1}"
  local OUTPUT="${PROX_DIR}/${1}"
  local OUTPUT_VID="${OUTPUT}-VIDEO"
  local OUTPUT_AUD="${OUTPUT}-AUDIO"
  local OUTFILE="$(basename "${OUTPUT}")"
  # Grabs file number (last 4 characters)
  local TC_TEXT="$(echo "${OUTFILE}" | cut -d_ -f4 | cut -d. -f1)"
  local TC_DATE="$(echo "${OUTFILE}" | cut -d_ -f2)"
  local VF_SCALE="scale=${PROX_W}/${PROX_H},setsar=1/1"
  local VF_DRAWTEXT="drawtext=font=${TC_FONT}:"
  VF_DRAWTEXT="${VF_DRAWTEXT} text='${TC_TEXT}\ ${TC_DATE}\ ':"
  VF_DRAWTEXT="${VF_DRAWTEXT} timecode='${TC_START}':"
  VF_DRAWTEXT="${VF_DRAWTEXT} r=${TC_RATE}:"
  case ${TC_POS} in
    l|left) VF_DRAWTEXT="${VF_DRAWTEXT} x=${TC_FONT_SIZE}:";;
    c|center) VF_DRAWTEXT="${VF_DRAWTEXT} x=(${PROX_W}-tw)/2:";;
    r|right) VF_DRAWTEXT="${VF_DRAWTEXT} x=${PROX_W}-tw-${TC_FONT_SIZE}:";;
    *) echo 'ERROR: unsupported timecode position "'${TC_POS}'"'; exit 1;;
  esac
  VF_DRAWTEXT="${VF_DRAWTEXT} y=h-(2*lh):"
  VF_DRAWTEXT="${VF_DRAWTEXT} fontsize=${TC_FONT_SIZE}:"
  VF_DRAWTEXT="${VF_DRAWTEXT} fontcolor=${TC_FONT_COLOR}:"
  VF_DRAWTEXT="${VF_DRAWTEXT} box=1: boxcolor=0x00000000@1"
  FFMPEG_LOG='-loglevel panic'
  echo "${OUTFILE}"

  # Split out audio (don't transcode)
  ffprobe "${INPUT}" 2>&1 | grep -i 'audio' >/dev/null || unset OUTPUT_AUD
  if test -z "${OUTPUT_AUD}"; then
    echo '  No audio found'
  else
    echo '  Separating audio ...'
    mkdir -p "${OUTPUT_AUD}"
    test -f "${OUTPUT_AUD}/${OUTFILE}" && rm "${OUTPUT_AUD}/${OUTFILE}"
    ffmpeg ${FFMPEG_LOG} -i "${INPUT}" \
      -map 0:a -c:a copy \
      "${OUTPUT_AUD}/${OUTFILE}" </dev/null
  fi
  
  # Process video (shrink and add timecode)
  echo '  Processing video ...'
  mkdir -p "${OUTPUT_VID}"
  test -f "${OUTPUT_VID}/${OUTFILE}" && rm "${OUTPUT_VID}/${OUTFILE}"
  ffmpeg ${FFMPEG_LOG} -i "${INPUT}" \
    -vf "${VF_SCALE}, ${VF_DRAWTEXT}" \
    -an -y ${PROX_FORMAT} -map 0:v \
    "${OUTPUT_VID}/${OUTFILE}" </dev/null

  # Concat audio and video (if both are present)
  if test ! -d "${OUTPUT_AUD}"; then
    mv "${OUTPUT_VID}/${OUTFILE}" "${OUTPUT}"
  else
    echo '  Concatenating audio and video ...'
    test -f "${OUTPUT}" && rm "${OUTPUT}"
    ffmpeg ${FFMPEG_LOG} -i "${OUTPUT_VID}/${OUTFILE}" \
      -i "${OUTPUT_AUD}/${OUTFILE}" \
      -map 0:v -map 1:a -c copy \
      "${OUTPUT}" </dev/null
  fi

  echo '  Removing temp files ...'
  rm -rf "${OUTPUT_VID}" "${OUTPUT_AUD}" 2>/dev/null
  echo
}

while IFS= read -r FILE; do
  mk_proxy "${FILE}"
done <<< "${FILES}"
