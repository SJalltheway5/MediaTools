#!/bin/bash

GO=1
while test "${GO}" = "1"; do

  unset GO
  case ${1} in
    # Print usage
    h|help|-h|--help)
      cat << DONE
Usage:
  ${0}  <options>  <files to process>

Options:
  -I|--loudness <value>    Defaults to -16 LUFS
  -LRA|--range <value>     Defaults to 11 LU
  -TP|--truepeak <value>   Defaults to -1.5 dBTP
  -ow|--overwrite          Overwrite existing output files
  -n|--dryrun              Scans, but doesn't process, input files

Example:
  ${0} -I -16 -LRA 11 -TP -1.5 -ow audio-1.wav audio-2.wav audio-n.wav

DONE
      exit 0;;
    # Manually set variables
    -I|--loudness)
      I='I='${2}
      shift; shift; GO=1;;
    -LRA|--range)
      LRA='LRA='${2}
      shift; shift; GO=1;;
    -TP|--truepeak)
      TP='TP='${2}
      shift; shift; GO=1;;
    -ow|--overwrite)
      OW=y
      shift; GO=1;;
    -n|--dryrun)
      DRYRUN=1
      shift; GO=1;;
  esac

done

# Set default loudness variables if needed
test -z ${I} && I='I=-16'
test -z ${LRA} && LRA='LRA=11'
test -z ${TP} && TP='TP=-1.5'

# Check for negative I and TP values
if test "$(echo ${I} | cut -c 3)" != "-"; then
  echo 'Loudness value (I) should be negative'
  I="$(echo ${I} | cut -d= -f1)=-$(echo ${I} | cut -d= -f2)"
  BR=1
fi
if test "$(echo ${TP} | cut -c 4)" != "-"; then
  echo 'True peak value (TP) should be negative'
  TP="$(echo ${TP} | cut -d= -f1)=-$(echo ${TP} | cut -d= -f2)"
  BR=1
fi
test "${BR}" = "1" && echo

if test ${#} -lt 1; then
  echo 'ERROR: no input files given'
  exit 1
fi

# Process files
while test ${#} -gt 0; do

  FILE="${1}"
  EXT="$(echo "${FILE}" | rev | cut -d. -f1 | rev)"
  test "${EXT,,}" != "wav" && echo 'Please use Linear PCM (*.wav) for audio processing'
  TXT="${FILE}.txt"
  OUTPUT="$(echo "${FILE}" | rev | cut -d. -f2- | rev)$(echo ${I} | cut -d= -f2)LUFS.${EXT}"
  PRINT='print_format=summary'

  # Pass 1
  echo 'Processing file "'${FILE}'" ...'
  echo '  Performing loudness scan (pass 1) ...'
  ffmpeg -i "${FILE}" \
    -af loudnorm=${I}:${LRA}:${TP}:${PRINT} \
    -f null - 2> "${TXT}"

  tail -12 "${TXT}" > "${TXT}1"
  cat > "${TXT}" << DONE
# Loudness analysis for "${FILE}"
# Generated by lufsnorm
# $(date)

DONE
  cat "${TXT}1" >> "${TXT}" && rm "${TXT}1"
  mI="measured_I=$(grep 'Input Integrated' "${TXT}" | rev | cut -d\  -f2 | rev)"
  mLRA="measured_LRA=$(grep 'Input LRA' "${TXT}" | rev | cut -d\  -f2 | rev)"
  mTP="measured_TP=$(grep 'Input True Peak' "${TXT}" | rev | cut -d\  -f2 | rev)"
  mTHRESH="measured_thresh=$(grep 'Input Threshold' "${TXT}" | rev | cut -d\  -f2 | rev)"
  OFFSET="offset=$(grep 'Target Offset' "${TXT}" | rev | cut -d\  -f2 | rev)"
  LOUDNORM="${I}:${LRA}:${TP}:${mI}:${mLRA}:${mTP}:${mTHRESH}:${OFFSET}:linear=true:${PRINT}"

  if test "${OW}" != "y" && test -f "${OUTPUT}"; then
    echo '  File "'${OUTPUT}'" already exists.'
    echo -n '    Overwrite? (y/N): '
    read OW
    test -z ${OW} && OW=n
    echo 'yes' | grep -i ${OW} >/dev/null 2>&1 && OW=y
  fi
  test "${OW}" = "y" && rm "${OUTPUT}"
  if test -f "${OUTPUT}"; then
    echo '  Process aborted'
    exit
  fi

  # Pass 2
  if test "${DRYRUN}" = "1"; then
    echo '  No processing performed (dry run)'
    echo
  else
    echo '  Processing audio (pass 2) ...'
    echo
    ffmpeg -i "${FILE}" \
      -af loudnorm="${LOUDNORM}" \
      "${OUTPUT}" 2>/dev/null
  fi  

  cat "${TXT}"
  echo

  shift

done
